{"John", "male", 25, 70.0, 80.0, 38.0, 180.0, 0.0, "active"},
{"Sarah", "female", 30, 60.0, 70.0, 32.0, 165.0, 90.0, "sedentary"},
{"Mike", "male", 45, 90.0, 100.0, 42.0, 175.0, 0.0, "moderate"},
{"Emma", "female", 55, 65.0, 75.0, 34.0, 160.0, 95.0, "active"},
{"David", "male", 35, 80.0, 90.0, 40.0, 185.0, 0.0, "sedentary"},
{"Sophia", "female", 40, 70.0, 80.0, 36.0, 170.0, 100.0, "moderate"}
{"Alex", "male", 30, 75.0, 85.0, 39.0, 175.0, 0.0, "active"},
{"Megan", "female", 35, 65.0, 75.0, 33.0, 170.0, 95.0, "sedentary"},
{"James", "male", 50, 85.0, 95.0, 41.0, 180.0, 0.0, "moderate"},
{"Olivia", "female", 60, 70.0, 80.0, 35.0, 165.0, 100.0, "active"},
{"Ethan", "male", 40, 80.0, 90.0, 40.0, 185.0, 0.0, "sedentary"},
{"Amelia", "female", 45, 75.0, 85.0, 37.0, 175.0, 105.0, "moderate"},
{"Noah", "male", 55, 90.0, 100.0, 42.0, 180.0, 0.0, "active"},
{"Isabella", "female", 50, 80.0, 90.0, 38.0, 170.0, 110.0, "sedentary"},
{"Liam", "male", 60, 95.0, 105.0, 43.0, 185.0, 0.0, "moderate"},
{"Sophie", "female", 55, 85.0, 95.0, 39.0, 175.0, 115.0, "active"},
{"Benjamin", "male", 65, 100.0, 110.0, 44.0, 180.0, 0.0, "sedentary"},
{"Emily", "female", 60, 90.0, 100.0, 40.0, 170.0, 120.0, "moderate"},
{"Jacob", "male", 70, 105.0, 115.0, 45.0, 185.0, 0.0, "active"},
{"Ava", "female", 65, 95.0, 105.0, 41.0, 175.0, 125.0, "sedentary"},
{"William", "male", 75, 110.0, 120.0, 46.0, 180.0, 0.0, "moderate"}


void addUserInfo() {
    UserInfo newUser;

    // Prompt for name input
    std::string input;
    std::cout << "\nPlease enter your name: ";

    // Validate name input (only letters)
    std::cin >> input;
    for (char c : input) {
        if (!std::isalpha(c)) {
            throw std::runtime_error("Invalid name. Please enter a name containing only letters.");
        }
    }
    newUser.name = input;

    // Prompt for and validate gender
    std::vector<std::string> validGenders = { "female", "male" };
    validateInput(
        "Please specify your gender as either male or female: ", 
        "Invalid gender. Gender must be either male or female.", 
        validGenders, newUser.gender
    );

    // Prompt for and validate age
    std::pair<int, int> ageRange = { 19, 79 };
    validateInput(
        "Enter your age: ", 
        "Invalid age. Age must be between 19 and 79.", 
        ageRange, newUser.age
    );

    // create a vector of pairs to simplify the measurement input validation process
    std::vector<std::pair<std::string, double*>> attributes = {
        {"Enter your body weight in kilograms: ", &newUser.weight},
        {"Enter your waist measurement in centimeters: ", &newUser.waist},
        {"Enter your neck measurement in centimeters: ", &newUser.neck},
        {"Enter your height measurement in centimeters: ", &newUser.height},
        {"Enter your hip measurement in centimeters: ", &newUser.hip}
    };

    // Prompt for and validate body measurements
    std::pair<double, double> measurementRange = { 0, std::numeric_limits<double>::max() };
    for (auto& attribute : attributes) {
        // Skip hip measurement if the user is a male
        if ((attribute.second == &newUser.hip) && (newUser.gender == "male")){
            continue;
        };
        validateInput(
            attribute.first, 
            "Invalid measurement. Measurement must be greater than 0.0.", 
            measurementRange, *attribute.second
        );
    };  

    // Prompt for and validate lifestyle
    std::vector<std::string> validLifestyles = { "sedentary", "moderate", "active" };
    validateInput(
        "Enter information about your current lifestyle (sedentary, moderate, or active): ", 
        "Invalid lifestyle. Lifestyle must be either sedentary, moderate, or active.", 
        validLifestyles, newUser.lifestyle
    );

    // Print success message and add user to 'mylist'
    std::cout << "User " << newUser.name << " has been added successfully.\n" << std::endl;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    mylist.push_back(newUser);
}

class USNavyMethod : public HealthAssistant {

    public:

        /** Calculates and updates the body fat percentage of a user using the US Navy method
         * Uses gender, age, waist, neck, hip, and height measurements to calculate body fat percentage
         **/
        void getBfp(std::string username) {
            double bfp;
            std::string gender = mymanager.getGender(username);
            int age = mymanager.getAge(username);
            double waist = mymanager.getWaist(username);
            double neck = mymanager.getNeck(username);
            double hip = mymanager.getHip(username);
            double height = mymanager.getHeight(username);

            if (gender == "male") {
                bfp = 495 / (1.0324 - 0.19077 * log10(waist - neck) + 0.15456 * log10(height)) - 450;
            } else {
                bfp = 495 / (1.29579 - 0.35004 * log10(waist + hip - neck) + 0.22100 * log10(height)) - 450;
            }

            std::string group = getBfpGroup(bfp, age, gender);
            mymanager.setBfp(username, {bfp, group});
            std::cout << "\nBody fat percentage for " << username << " is " << bfp << "%, which is " << group << "." << std::endl;
        }
};

class BmiMethod : public HealthAssistant {
    
    public:

        /** Calculates and updates the body fat percentage of a user using the BMI method
         * Uses weight and height measurements to calculate body fat percentage
        **/
        void getBfp (std::string username) {
            // Get user information from the static UserInfo vector
            int age = mymanager.getAge(username);
            std::string gender = mymanager.getGender(username);
            double weight = mymanager.getWeight(username);
            double height = mymanager.getHeight(username);

            // Calculate body fat percentage using the BMI method
            double bfp = (weight / ((height * height) / 100));
            std::string group = getBfpGroup(bfp, mymanager.getAge(username), mymanager.getGender(username));
            mymanager.setBfp(username, {bfp, group});
        }
};

std::string getBfpGroup(double bfp, int age, std::string gender) {
    std::vector<std::pair<int, std::string>> ranges;
    // Set the thresholds for bfp group based on age
    if (gender == "female") {
        if (age >= 20 && age <= 39) ranges = {{21, "low"}, {33, "normal"}, {39, "high"}};
        else if (age >= 40 && age <= 59) ranges = {{23, "low"}, {34, "normal"}, {40, "high"}};
        else if (age >= 60 && age <= 79) ranges = {{24, "low"}, {36, "normal"}, {42, "high"}};
    } else if (gender == "male") {
        if (age >= 20 && age <= 39) ranges = {{8, "low"}, {20, "normal"}, {25, "high"}};
        else if (age >= 40 && age <= 59) ranges = {{11, "low"}, {22, "normal"}, {28, "high"}};
        else if (age >= 60) ranges = {{13, "low"}, {25, "normal"}, {30, "high"}};
    }

    // Return the group based on the bfp and the thresholds
    for (auto& range : ranges) {
        if (bfp < range.first) return range.second;
    }
    return "very high";
}